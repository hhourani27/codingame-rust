#![allow(warnings, unused)]

fn movetuple_to_move81(move_: (u8, u8)) -> u128 {
    let (r, c) = (move_.0 % 3, move_.1 % 3);
    let (sq_r, sq_c) = (move_.0 / 3, move_.1 / 3);

    let bit = 0b1 << (((2 - sq_r) * 3 + (2 - sq_c)) * 9) + ((2 - r) * 3 + (2 - c));

    bit
}

fn main() {
    use std::time::{Duration, Instant};

    for r in 0..9 {
        let mut row_out = String::new();
        for c in 0..9 {
            let move81 = movetuple_to_move81((r, c));
            row_out.push_str(&format!("{},", move81));
        }
        println!("{}", row_out);
    }

    println!("Square");

    println!(
        "{}",
        0b111111111_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_111111111_000000000_000000000_000000000_000000000_000000000_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_111111111_000000000_000000000_000000000_000000000_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_000000000_111111111_000000000_000000000_000000000_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_000000000_000000000_111111111_000000000_000000000_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_000000000_000000000_000000000_111111111_000000000_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_000000000_000000000_000000000_000000000_111111111_000000000_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_111111111_000000000u128
    );
    println!(
        "{}",
        0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_111111111u128
    );
}
