use std::collections::HashMap;
use std::sync::mpsc::{Receiver, Sender};

macro_rules! parse_input {
    ($x:expr, $t:ident) => {
        $x.trim().parse::<$t>().unwrap()
    };
}

/* #region(collapsed) [General Data Structure] */
#[allow(non_snake_case)]
#[derive(Clone, Copy)]
pub struct StackVector<T: Copy + Clone + Default, const MAX_SIZE: usize> {
    pub arr: [T; MAX_SIZE],
    pub len: usize,
}

#[allow(dead_code)]
impl<T: Copy + Clone + Default, const MAX_SIZE: usize> StackVector<T, MAX_SIZE> {
    pub fn new() -> Self {
        Self {
            arr: [T::default(); MAX_SIZE],
            len: 0,
        }
    }

    pub fn add(&mut self, e: T) {
        self.arr[self.len] = e;
        self.len += 1;
    }

    pub fn slice(&self) -> &[T] {
        &self.arr[0..self.len]
    }

    pub fn slice_mut(&mut self) -> &mut [T] {
        &mut self.arr[0..self.len]
    }

    pub fn get(&self, idx: usize) -> &T {
        &self.arr[idx]
    }

    pub fn get_mut(&mut self, idx: usize) -> &mut T {
        &mut self.arr[idx]
    }

    pub fn remove(&mut self, idx: usize) -> T {
        let removed_element = self.arr[idx];

        for i in idx..self.len - 1 {
            self.arr[i] = self.arr[i + 1];
        }
        self.len -= 1;

        removed_element
    }

    pub fn remove_multi<const NB_ELEMENTS: usize>(
        &mut self,
        mut indices: [usize; NB_ELEMENTS],
    ) -> [T; NB_ELEMENTS] {
        let mut removed_elements: [T; NB_ELEMENTS] = [Default::default(); NB_ELEMENTS];

        indices.sort();
        for i in 0..NB_ELEMENTS {
            removed_elements[i] = self.remove(indices[i] - i);
        }

        removed_elements
    }

    pub fn len(&self) -> usize {
        self.len
    }

    pub fn from(v: &[T]) -> StackVector<T, MAX_SIZE> {
        let mut sv: StackVector<T, MAX_SIZE> = StackVector::new();

        for e in v.iter() {
            sv.add(e.clone());
        }
        sv
    }
}

impl<T: Copy + Clone + Default, const MAX_SIZE: usize> IntoIterator for StackVector<T, MAX_SIZE> {
    type Item = T;
    type IntoIter = StackVectorIntoIterator<T, MAX_SIZE>;

    fn into_iter(self) -> Self::IntoIter {
        StackVectorIntoIterator {
            stack_vector: self,
            index: 0,
        }
    }
}

pub struct StackVectorIntoIterator<T: Copy + Clone + Default, const MAX_SIZE: usize> {
    stack_vector: StackVector<T, MAX_SIZE>,
    index: usize,
}

impl<T: Copy + Clone + Default, const MAX_SIZE: usize> Iterator
    for StackVectorIntoIterator<T, MAX_SIZE>
{
    type Item = T;
    fn next(&mut self) -> Option<T> {
        if self.index > self.stack_vector.len() {
            return None;
        }
        let result = self.stack_vector.arr[self.index];
        self.index += 1;
        Some(result)
    }
}

/* #endregion */

mod game {
    use super::StackVector;
    use std::convert::TryInto;
    use std::fmt::Display;

    const EXISTING_SPELL_COUNT: usize = 42 + 4;
    const EXISTING_ORDER_COUNT: usize = 36;

    pub const MAX_NEXT_MOVES: usize = 35 + 5 + 6 + 1;

    #[derive(Clone, Copy)]
    pub enum Move {
        NONE,
        WAIT,
        REST,
        BREW(u32),
        CAST(u32, u8),
        LEARN(u32),
    }

    impl Display for Move {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Move::NONE => write!(f, "NONE"),
                Move::WAIT => write!(f, "WAIT"),
                Move::REST => write!(f, "REST"),
                Move::BREW(i) => write!(f, "BREW {}", i),
                Move::CAST(i, 1) => write!(f, "CAST {}", i),
                Move::CAST(i, t) => write!(f, "CAST {} {}", i, t),
                Move::LEARN(i) => write!(f, "LEARN {}", i),
            }
        }
    }

    impl Default for Move {
        fn default() -> Self {
            Move::NONE
        }
    }

    type Recipe = [i8; 4];
    type Stock = [i8; 4];

    #[derive(Clone, Copy)]
    pub struct Player {
        pub stock: Stock,
        pub stock_id: usize,
        pub spells: StackVector<(u32, bool), EXISTING_SPELL_COUNT>,
        pub rupees: u8,
        pub brewed_potions_count: u8,
    }

    #[derive(Clone, Copy)]
    pub struct State {
        // Player state
        pub player: Player,

        // Game state
        pub counter_orders: StackVector<u32, 5>,
        pub plus_3_bonus_remaining: u8,
        pub plus_1_bonus_remaining: u8,

        pub tome_spells: StackVector<(u32, u8), 6>,

        pub turn: u8,
    }

    impl Default for State {
        fn default() -> Self {
            Self {
                player: Player {
                    stock: [0, 0, 0, 0],
                    stock_id: 0,
                    spells: StackVector::new(),
                    rupees: 0,
                    brewed_potions_count: 0,
                },
                // Game state
                counter_orders: StackVector::new(),
                plus_3_bonus_remaining: 0,
                plus_1_bonus_remaining: 0,

                tome_spells: StackVector::new(),

                turn: 0,
            }
        }
    }

    pub fn next_states(state: &State, cache: &Cache) -> Vec<(Move, State)> {
        let orders = state.counter_orders.slice();
        let tome_spells = state.tome_spells.slice();
        let player_spells = state.player.spells.slice();
        let player_stock = &state.player.stock;
        let player_stock_id = state.player.stock_id;

        let mut valid_moves: Vec<Move> = Vec::new();

        /* If it's a terminal node, don't return any state */

        if state.turn == 100 || state.player.brewed_potions_count == 6 {
        } else if player_spells.len() < 10 {
            valid_moves.push(Move::LEARN(tome_spells[0].0))
        } else {
            /* (A) Determine Valid moves */

            /* BREW moves */
            // Check which order the player can fulfill and add them as a valid move
            for order_id in orders.iter() {
                if cache.can_fulfill_order(*order_id, player_stock_id) {
                    valid_moves.push(Move::BREW(*order_id));
                }
            }

            /* CAST moves */
            // Check which spell the player can cast and add them as a valid move
            // in the meantime check if there are inactive spells
            let mut all_spells_are_active = true;
            for (spell_id, active) in player_spells.iter() {
                if *active == false {
                    all_spells_are_active = false;
                } else {
                    let times_can_cast_spell =
                        cache.how_many_times_can_cast_spell(*spell_id, player_stock_id);
                    if times_can_cast_spell > 0 {
                        for n in 1..=times_can_cast_spell {
                            valid_moves.push(Move::CAST(*spell_id, n));
                        }
                    }
                }
            }

            /* REST move */
            if all_spells_are_active == false {
                valid_moves.push(Move::REST);
            }

            /* LEARN moves */
            if tome_spells.len() > 0 {
                for t in 0..=std::cmp::min(player_stock[0] as usize, tome_spells.len() - 1) {
                    valid_moves.push(Move::LEARN(tome_spells[t].0));
                }
            }
        }

        /* (B) Generate state for each move */
        valid_moves
            .into_iter()
            .map(|m| (m, update(state, &m, cache)))
            .collect::<Vec<(Move, State)>>()
    }

    fn update(state: &State, move_: &Move, cache: &Cache) -> State {
        let mut new_state = state.clone();
        match move_ {
            Move::BREW(order_id) => {
                let order = cache.getOrder(*order_id);
                let order_pos =
                    get_order_position(new_state.counter_orders.slice(), *order_id).unwrap();

                // Update stock
                brew_and_update_stock(&mut new_state.player.stock, &order.recipe);
                new_state.player.stock_id = cache.getStockId(&new_state.player.stock);

                // Update score
                let mut bonus = 0;
                if order_pos == 0 {
                    if new_state.plus_3_bonus_remaining > 0 {
                        bonus = 3;
                        new_state.plus_3_bonus_remaining -= 1;
                    } else if new_state.plus_1_bonus_remaining > 0 {
                        bonus = 1;
                        new_state.plus_1_bonus_remaining -= 1;
                    }
                } else if order_pos == 1 {
                    if new_state.plus_3_bonus_remaining > 0 && new_state.plus_1_bonus_remaining > 0
                    {
                        bonus = 1;
                        new_state.plus_1_bonus_remaining -= 1;
                    }
                }

                new_state.player.brewed_potions_count += 1;
                new_state.player.rupees += order.price + bonus;

                // Update counter
                new_state.counter_orders.remove(order_pos);
            }
            Move::CAST(spell_id, times) => {
                let spell = cache.getSpell(*spell_id);
                let spell_pos =
                    get_player_spell_position(new_state.player.spells.slice(), *spell_id).unwrap();

                // Update stock
                cast_and_update_stock(&mut new_state.player.stock, &spell.recipe, *times);
                new_state.player.stock_id = cache.getStockId(&new_state.player.stock);

                // Update player spells
                new_state.player.spells.get_mut(spell_pos).1 = false;
            }
            Move::LEARN(spell_id) => {
                let spell_pos =
                    get_tome_spell_position(new_state.tome_spells.slice(), *spell_id).unwrap();

                // add the learnt spell to the player's spell
                new_state.player.spells.add((*spell_id, true));

                // pay the tax if needed
                new_state.player.stock[0] -= spell_pos as i8;
                // and gain any tier-0 ingredient put on the spell
                let tax = new_state.tome_spells.get(spell_pos).1;
                if tax > 0 {
                    let empty_storage = 10
                        - new_state.player.stock[0]
                        - new_state.player.stock[1]
                        - new_state.player.stock[2]
                        - new_state.player.stock[3];
                    new_state.player.stock[0] += std::cmp::min(tax as i8, empty_storage);
                }
                new_state.player.stock_id = cache.getStockId(&new_state.player.stock);

                // remove learnt spell from tome spells
                new_state.tome_spells.remove(spell_pos);
            }
            Move::REST => {
                for spell in new_state.player.spells.slice_mut().iter_mut() {
                    spell.1 = true;
                }
            }
            Move::NONE | Move::WAIT => {}
        }

        new_state.turn += 1;

        new_state
    }

    pub fn eval(state: &State, cache: &Cache) -> f32 {
        let mut max_future_score: f32 = 0.0;
        for (order_pos, order_id) in state.counter_orders.slice().iter().enumerate() {
            let mut price = cache.getOrder(*order_id).price;
            if order_pos == 0 {
                price += 3;
            } else if order_pos == 1 {
                price += 1;
            }

            let estimated_distance = cache.estimate_distance(state.player.stock_id, *order_id);

            let estimated_score: f32 = ((price * 10) as f32 / 26.0) * estimated_distance as f32;

            if estimated_score > max_future_score {
                max_future_score = estimated_score;
            }
        }

        const TIER0_FACTOR: f32 = 0.0;
        const TIER1_FACTOR: f32 = 0.0;
        const TIER2_FACTOR: f32 = 0.0;
        const TIER3_FACTOR: f32 = 0.0;
        const RUPEES_FACTOR: f32 = 10.0;

        RUPEES_FACTOR * state.player.rupees as f32
            + max_future_score
            + TIER0_FACTOR * state.player.stock[0] as f32
            + TIER1_FACTOR * state.player.stock[1] as f32
            + TIER2_FACTOR * state.player.stock[2] as f32
            + TIER3_FACTOR * state.player.stock[3] as f32
    }

    /* #region(collapsed) [Cache] */

    #[allow(non_snake_case)]
    pub struct Cache {
        map_stockArr4_stockId: Vec<Vec<Vec<Vec<usize>>>>,
        map_stockId_timesCanCastSpell: [[u8; EXISTING_SPELL_COUNT]; 1001],
        map_stockId_canFullfillOrder: [[bool; EXISTING_ORDER_COUNT]; 1001],

        map_orderId_Order: [Order; EXISTING_ORDER_COUNT],
        map_spellId_Spell: [Spell; EXISTING_SPELL_COUNT],

        distance_stock_order: [[u8; 36]; 1001],
    }

    #[allow(non_snake_case)]
    impl Cache {
        pub fn new() -> Self {
            let (
                map_stockArr4_stockId,
                map_stockId_timesCanCastSpell,
                map_stockId_canFullfillOrder,
            ) = Cache::init_map_stocks();

            let map_orderId_Order = get_all_orders().try_into().unwrap();
            let map_spellId_Spell = get_all_tome_spells().try_into().unwrap();

            let distance_stock_order = Cache::init_distance_stock_order();

            Cache {
                map_stockArr4_stockId,
                map_stockId_timesCanCastSpell,
                map_stockId_canFullfillOrder,

                map_orderId_Order,
                map_spellId_Spell,

                distance_stock_order,
            }
        }

        fn init_map_stocks() -> (
            Vec<Vec<Vec<Vec<usize>>>>,
            [[u8; EXISTING_SPELL_COUNT]; 1001],
            [[bool; EXISTING_ORDER_COUNT]; 1001],
        ) {
            let mut map_stockArr4_stockId: Vec<Vec<Vec<Vec<usize>>>> =
                vec![vec![vec![vec![0; 11]; 11]; 11]; 11];

            let mut map_stockId_timesCanCastSpell: [[u8; EXISTING_SPELL_COUNT]; 1001] =
                [[0; EXISTING_SPELL_COUNT]; 1001];

            let mut map_stockId_canFullfillOrder: [[bool; EXISTING_ORDER_COUNT]; 1001] =
                [[false; EXISTING_ORDER_COUNT]; 1001];

            let all_spells = get_all_tome_spells();
            let all_orders = get_all_orders();

            let mut id = 0;
            for t0 in 0..=10 {
                for t1 in 0..=(10 - t0) {
                    for t2 in 0..=(10 - t0 - t1) {
                        for t3 in 0..=(10 - t0 - t1 - t2) {
                            map_stockArr4_stockId[t0][t1][t2][t3] = id;

                            for spell in all_spells.iter() {
                                map_stockId_timesCanCastSpell[id][spell.id as usize] =
                                    how_many_times_can_cast_spell(
                                        &spell,
                                        &[t0 as i8, t1 as i8, t2 as i8, t3 as i8],
                                    );
                            }

                            for order in all_orders.iter() {
                                map_stockId_canFullfillOrder[id][order.id as usize] =
                                    can_fulfill_order(
                                        &order,
                                        &[t0 as i8, t1 as i8, t2 as i8, t3 as i8],
                                    );
                            }

                            id += 1;
                        }
                    }
                }
            }

            (
                map_stockArr4_stockId,
                map_stockId_timesCanCastSpell,
                map_stockId_canFullfillOrder,
            )
        }

        fn init_distance_stock_order() -> [[u8; 36]; 1001] {
            let distance_temp = [
                "788888898899999999999999788999988999",
                "677677786868788888988899577878967889",
                "667677782768688676877778466767866787",
                "667677782758688662836767466766766786",
                "677677782758588662815763466866757786",
                "688788792868688672916761566867867886",
                "899899892979699672916861677988869996",
                "999999992999699782916871888999979997",
                "999999992999899992918991999999999999",
                "999999999999999999919991999999999999",
                "999999999999999999919991999999999999",
                "667576687788888888899999676789967889",
                "567466683667677677888789363767826778",
                "567466682657577263866668352665626666",
                "566466682647477262825626352654626762",
                "577476682647477262814622352754626772",
                "798598792768488262914621562975628882",
                "999899892998699282916721862998829992",
                "999999992999799292917921983999929992",
                "999999999999999999919991999999999999",
                "999999999999999999919991999999999999",
                "667265687576766788888889563688836778",
                "566265572466666367787678342665626657",
                "566265572456466162766238342652625643",
                "577275582446466162724216342652526642",
                "698286592466476162815212442762627752",
                "999299692897588172815211762992629972",
                "999299892999799192917211972992829992",
                "999999999999999199919911999999999999",
                "999999999999999199919911999999999999",
                "667264586272766688688789563687836768",
                "467264472262665266677368352563626627",
                "577274482242564162666128342662425623",
                "698286492262465162624116342662427722",
                "999299592292586172715112752992629922",
                "999299892292798192917111972992829922",
                "999999999999999199919111999999999999",
                "999999999999999199919111999999999999",
                "667264587271765688288679562576736738",
                "577264482261664267277268452562626627",
                "698286382261464162266128442662427723",
                "999299592291475172226117752992529922",
                "999299792291797192217112972992729922",
                "999999999991999199919111999999999999",
                "999999999991999199919111999999999999",
                "677275487281764688188689562687736738",
                "698286482261664277188269442672627727",
                "999299592291675182176128742992629923",
                "999299792291797192127118972992729922",
                "999999999991999199119112999999999999",
                "999999999991999199119111999999999999",
                "698286497281864688188689562687838738",
                "999299592291675288188279762992629928",
                "999299792291797192178129972992729923",
                "999999999991999199129119999999999999",
                "999999999991999199119112999999999999",
                "999299698291886799199789862998839939",
                "999299792291797299199279972992729929",
                "999999999991999199199129999999999999",
                "999999999991999199129119999999999999",
                "999299799291997799199789982999939939",
                "999999999991999299199299999999999999",
                "999999999991999199199129999999999999",
                "999999999991999999199999999999999999",
                "999999999991999299199299999999999999",
                "999999999991999999199999999999999999",
                "667667788888888889999999677889968899",
                "466666673768678777888889256768836788",
                "466666672747277663876778246746726676",
                "466666672747277552822766246736626673",
                "466667682758278552912762246846626682",
                "587688792868288662912761246956728882",
                "898899892989299662912861257988829992",
                "999999992999299882912981289999939993",
                "999999999999999999919991999999999999",
                "999999999999999999919991999999999999",
                "466366576677767788888889356688836779",
                "356255473656366567877778222656625667",
                "356255372646266253863657222543525563",
                "366255372647266242822526222632424562",
                "476266482657267242812622222742426662",
                "798299592888288252912621222972429982",
                "999399892999299272912821222993829992",
                "999999999999999299919921999999999999",
                "999999999999999299919921999999999999",
                "366264276376755678788789233477836668",
                "356243272255254266776568222453524537",
                "356244272245254142762228222432224523",
                "476266282256254142722216222542226622",
                "797298292286265152812212222872229822",
                "999299292398288172912211222992229932",
                "999999999999999199919211999999999999",
                "999999999999999199919211999999999999",
                "366264276272642677688679223376725638",
                "356253272252242266577268222353324526",
                "476265282262242152662128222342226622",
                "797298292282252152622117222772229722",
                "999299292292272172812112222992229922",
                "999999999992999199919111999999999999",
                "999999999992999199919111999999999999",
                "466254276271642677288679222377726638",
                "376265282261242266277268222462226627",
                "797298292281252162272128222772229722",
                "999299292291272172222117222992229922",
                "999999999991999199219112999999999999",
                "999999999991999199219111999999999999",
                "476265286281742678188689222486726628",
                "797298292281252267187279222782229727",
                "999299292291272172173128222992229922",
                "999999999991999199129119999999999999",
                "999999999991999199119112999999999999",
                "798298297291762689198789222797729828",
                "999299292291372289188279222992329929",
                "999999999991999199199129999999999999",
                "999999999991999199129119999999999999",
                "999299299291872799199789232999829929",
                "999999999991999299199299999999999999",
                "999999999991999199199129999999999999",
                "999999999991999999199999999999999999",
                "999999999991999299199299999999999999",
                "999999999991999999199999999999999999",
                "256656677788778888998999367788967789",
                "245646663768367657887889226657726578",
                "255636662647167523863768225626625476",
                "256636662748167522821666225626626572",
                "266657672868178522911752226726626572",
                "296889782989188622911861226928729782",
                "298999992999199722911971228929929992",
                "999999999999199999911991999999999999",
                "999999999999199999911991999999999999",
                "245245266677656778888889336578836678",
                "244235262656246436876678212436624267",
                "243235262646146222862657212422224263",
                "264246262656146222821526212422226262",
                "295278282788156222911622212822228272",
                "298299292999189222911721212922229292",
                "999999999999199299911921919999999999",
                "999999999999199299911921919999999999",
                "254244166276622667787789223277735368",
                "244234162254222226676568212223324227",
                "263245162245122122762227212222125223",
                "295278172286122122821216212222128222",
                "297299192297122122911212212222129222",
                "999999199999199199911211919999199999",
                "999999199999199199911211919999199999",
                "255234166272621678687779222276625338",
                "264244162262221226576268212222225226",
                "294278172282121122662128212222128222",
                "297299192292121122721116212222129222",
                "999999199992191199911112919999199999",
                "999999199992191199911111919999199999",
                "264245166271621677288679222276626338",
                "295278172281221227287269212222228227",
                "297299192291121122272128212222129222",
                "999999199991191199221118919999199999",
                "999999199991191199211112919999199999",
                "296278187291721678198689222287729328",
                "297299192291221238187279212222229228",
                "999999199991191199182129919999199999",
                "999999199991191199121119919999199999",
                "297299198291721689198689222298729329",
                "999999199991291299199289919999299999",
                "999999199991191199192129919999199999",
                "999999199991991899199899929999999999",
                "999999199991291299199299919999299999",
                "999999199991991999199999929999999999",
                "242626667778667878888889367678866688",
                "242626653767267637886788226637725377",
                "242626552647166513862768225626625276",
                "262627562758167512821766226626626272",
                "282728662878168612911762226827628282",
                "292829782999199612911861227928729392",
                "999999999999199819911981929999999999",
                "999999999999199919911991929999999999",
                "242225246676626767888889225378736378",
                "232224242556225426776678212236524267",
                "262226242656125212862657212222226263",
                "282228262777126212821627212222228262",
                "292229282898127212911622212322229282",
                "999999299999199219911821919999299999",
                "999999299999199219911921919999299999",
                "242224146275612667787789222277725368",
                "252225142265212226676568212223225226",
                "282227142276112112762228212222127222",
                "292229172296112112821216212222129222",
                "999999199998112119911212919999199999",
                "999999199999112119911211919999199999",
                "252225146272611667687679222267626237",
                "282227152282211227686278212222227226",
                "292229172292111112662128212222129222",
                "999999199992111119821118919999199999",
                "999999199992111119911112919999199999",
                "282227167281611678288689222277728228",
                "292229172291211228286269212222229227",
                "999999199991111119272129919999199999",
                "999999199991111119221119919999199999",
                "292229178291611679198689222298629228",
                "999999199991211229198289919999299999",
                "999999199991111119192129919999199999",
                "999999199991811889199899929999899999",
                "999999199991211229199299919999299999",
                "999999199991911999199999929999999999",
                "241626527777667878888889356678856688",
                "241526523767256627886888226637725277",
                "251627522757166613872768225626626276",
                "281728622878167612921767226727627282",
                "291829722999179612911862227928629292",
                "991999999999199819911981929999999999",
                "991999999999199919911991929999999999",
                "241225226676626768887889225268726378",
                "251226222666225526876778212226525267",
                "281227222777126212872668212222227262",
                "291229222898126212921627212222229272",
                "991999299999129219911822919999299999",
                "991999299999129219911921919999299999",
                "251225126276612667787789222267726368",
                "271227122286212227786678212223227227",
                "291229122286112112862228212222129222",
                "991999199998112119921218919999199999",
                "991999199999112119911212919999199999",
                "281227127282611768688789222277728228",
                "291228122282211228686278212222228227",
                "991999199992111119872129919999199999",
                "991999199992111119921119919999199999",
                "291228128291611678288789222288629228",
                "991999199991211229298289919999299999",
                "991999199991111119292129919999199999",
                "991999199991811889199799929999899999",
                "991999199991211229199299919999299999",
                "991999199991911999199999929999999999",
                "241627617788667868888889357678856688",
                "251627513768257727887888226637726277",
                "271728512878167613972888226727627286",
                "291829612989168612921867227828628282",
                "991999819999189819911982929999899999",
                "991999919999199919911991929999999999",
                "251226217687626768888889226278726378",
                "271228212787225627887789212227627267",
                "281228212888126212972668212222228273",
                "991999219999128219921828919999299999",
                "991999219999129219911922919999299999",
                "271227117286612768888889222278728268",
                "281228112286212228886679212223228228",
                "991999119998112119972229919999199999",
                "991999119999112119921219919999199999",
                "291228118292611768688789222288728238",
                "991999119992211229898289919999299999",
                "991999119992111119992129919999199999",
                "991999119991811889299899929999899999",
                "991999119991211229299299919999299999",
                "991999119991911999199999929999999999",
                "251627617888767878888889357678867688",
                "271728613888267728887889226738727288",
                "281829612888168613972888227828628287",
                "991999819999188819921888929999899999",
                "991999919999199919911992929999999999",
                "271227217788726878888889226278828288",
                "281228212888226628887889212228628288",
                "991999219998128219982879919999299999",
                "991999219999129219921929919999299999",
                "281228118296612768888889223288728278",
                "991999119998212229887789919999299999",
                "991999119999112119992229919999199999",
                "991999119992811889899899929999899999",
                "991999119992211229999299919999299999",
                "991999119991911999299999929999999999",
                "271728618888768878888999368788868688",
                "281829613888268828987889227838828288",
                "991999819999188819982889929999899999",
                "991999919999199919921999929999999999",
                "281228218898726879898889227288838388",
                "991999219998228729998899919999799999",
                "991999219999129219992999919999299999",
                "991999119998812889899999929999899999",
                "991999119999212229999999919999299999",
                "991999119992911999999999929999999999",
                "281829618898768879998999368889878789",
                "991999819999288829998999929999899999",
                "991999919999199919992999929999999999",
                "991999219998828989999999929999999999",
                "991999219999229929999999919999999999",
                "991999119999912999999999929999999999",
                "991999819999888989999999979999999999",
                "991999919999299929999999929999999999",
                "991999219999929999999999929999999999",
                "991999919999999999999999999999999999",
                "678777888888888999999999688899978999",
                "667676783768688777888889266778856788",
                "667666782728578663876778266766746777",
                "667676782728587662835767266766746775",
                "668676782728488562915763266866746785",
                "688688792828588662915761266966747885",
                "999899892929699672916861266998859995",
                "999999992929799882917981289999989998",
                "999999999999999999919991999999999999",
                "999999999999999999919991999999999999",
                "667365687677777888888899366788956889",
                "457264673637677667887779252666724668",
                "556264672626567263866658252653624665",
                "457264682627477262824626252652623662",
                "677275692627477262814622252762625772",
                "899298692828588262914621262982628882",
                "999399892929799282917821272993829992",
                "999999999999999299919921999999999999",
                "999999999999999399919931999999999999",
                "667262576376766788788789363687836768",
                "556262572225566366777568241663624657",
                "457262482225466162765238241652523643",
                "567272582225366162724216241662524642",
                "798292592226476162814212251972627842",
                "999292792328688182916211271992729982",
                "999999999999999199919211991999999999",
                "999999999999999199919311991999999999",
                "557262476272765688688689352576725758",
                "557262482222564266577368241563623627",
                "567272482222464162666127241662424622",
                "798292592222566162625117241882427722",
                "999292792222687182817112261992729922",
                "999999999992999199919111991999999999",
                "999999999993999199919111991999999999",
                "567262486271764688288679362586725738",
                "667272482221664266277268241562624627",
                "798292492221565172266128241772527722",
                "999292692221687182226117261992729922",
                "999999999991999199219112991999999999",
                "999999999991999199319111991999999999",
                "667272486271764688188689362686726728",
                "898292492221664277188269251882627827",
                "999292692221686182177128261992629923",
                "999999999991999199129119991999999999",
                "999999999991999199119112991999999999",
                "798292597281875688198689362897828828",
                "999292692221786289189279261992729928",
                "999999999991999199199129991999999999",
                "999999999991999199129119991999999999",
                "999292699291986799199789372999839939",
                "999999999991999299199299991999999999",
                "999999999991999199199129991999999999",
                "999999999991999899199899992999999999",
                "999999999991999299199299991999999999",
                "999999999991999999199999992999999999",
                "256666687878788888999999367789967889",
                "246666673737577667887889246667825688",
                "246556672627277653864768235626624676",
                "236666672728277552822766245726624672",
                "256666682728278552912752246826624672",
                "287798792828288662912761246927728882",
                "298999992929299772912971268929929992",
                "999999999999299999912991999999999999",
                "999999999999299999912991999999999999",
                "246253476677767778888889345678835678",
                "236252373636366466776678222436612567",
                "236252372626266243863647222422412563",
                "246262372626266242822526222522312561",
                "276282482627267252912622222722412661",
                "298293692929289272912721222922612881",
                "999999999999299299912921922999919991",
                "999999999999299299912921922999919991",
                "236252276266654677788789232277723668",
                "236252272225253256676468221233412426",
                "246262272225243152662227221222212422",
                "276272282226263152722216221222212521",
                "298292292227276162912212221222212721",
                "999999299999299199912211921999219991",
                "999999299999299199912211921999219991",
                "246252276262642677688678222276622538",
                "246262272222242266576268221233312416",
                "276272282222242152662128221222212512",
                "298292292222272162722116221222212711",
                "999999299992292199912112921999219911",
                "999999299992292199912111921999219911",
                "246262276271642677288679222276622628",
                "276272282221242267287268221232212616",
                "297292292221262162262128221222212712",
                "999999299991292199222118921999219911",
                "999999299991292199212112921999219911",
                "276272287271752688188689222287722628",
                "298292292221262278187269221232212717",
                "999999299991292199182129921999219912",
                "999999299991292199122119921999219911",
                "298292298291762689198689222298722728",
                "999999299991292299198289921999219918",
                "999999299991292199193129921999219912",
                "999999299991892899199899922999829929",
                "999999299991392299199299921999319919",
                "999999299991992999199999932999929929",
                "226626677778767878888899366678856788",
                "225626663637367647877788225637723577",
                "225526562627167523863668225626622475",
                "225526562728167522821656225626622472",
                "226627672828178522911752225826622472",
                "227729782929199622911861226927723892",
                "999999999999199829911981928999929992",
                "999999999999199929911991939999929992",
                "224222266676646777888889334377723578",
                "224222262526235436776678212236512266",
                "224222262626136222862547212222212252",
                "225222262627146222821526212222212261",
                "227222282728167222911622212322212271",
                "999999299999199229911821912999219991",
                "999999399999199229911921912999319991",
                "224222166265622667787779222266723358",
                "224222162224222226676468211223312226",
                "224222162225122122762228211222112222",
                "226222182226122122821216211222112221",
                "999899199998122129911212911999119921",
                "999999199999123129911211911999119921",
                "224222166262621667587679222266622227",
                "224222162222221226586268211222212216",
                "226222182222121122662128211222112212",
                "999999199992121129821117911999119911",
                "999999199992121129911112911999119911",
                "225222166271621678288689222276622228",
                "227222182221221227287269211222212216",
                "999999199991121129272129911999119912",
                "999999199991121129221118911999119911",
                "226222187281721678198689222287622328",
                "999999199991221229198279911999219918",
                "999999199991121129182129911999119912",
                "999999199991821789199799922999829929",
                "999999199991221239199289911999219919",
                "999999199991921899199899922999929929",
                "222626666777667778888889346678856688",
                "222526552637256637876788225637622277",
                "222526452627166512862768225626622275",
                "222627662728167512821767225626622272",
                "222728772829178612911862226927622282",
                "992999998999199818911981928999929992",
                "992999999999199919911991929999929992",
                "222222246666625767887889224267723368",
                "222222242526225426876678212235512166",
                "222222242627126212862658212222212162",
                "222222272728126212921627212222212161",
                "992899298999129218911822912998219181",
                "992999299999139219911921912999219191",
                "222222146265612667787789222266622257",
                "222222142225212226776468211222212126",
                "222222162226112112862228211222112122",
                "992899198898112118921217911998119121",
                "992999199999112119911212911999119121",
                "222222156272611668688789222267622228",
                "222222162222211227676278211222212116",
                "992899198892111118872128911998119112",
                "992999199992111119921118911999119111",
                "222222167281611668288689222287622228",
                "992899198891211228288279911998219117",
                "992999199991111119282129911999119112",
                "992899199891811789199799922999829229",
                "992999199991211229199289911999219119",
                "992999199991911899199899922999929229",
                "221626526777667868887889246678846578",
                "221526422637256626886788226637622277",
                "221627422728167612972778225626622275",
                "221728622828168612921867226727622282",
                "991999828999199818911882828999829282",
                "991999929999199919911991929999929292",
                "221222226676626767887889224267723268",
                "221222222627225527876778212226512167",
                "221222222728126212862658212222212162",
                "991899228999128218921828812998219181",
                "991999229999129219911922912999219191",
                "221222126276612768787789222267722258",
                "221222122226212227886678211222212127",
                "991899128898112118972228811988119122",
                "991999129999112119921218911999119121",
                "221222127282611668688789222278622228",
                "991899128892211229787289811998219117",
                "991999129992111119982129911999119112",
                "991899129891711789299889822999729229",
                "991999129991211229298289911999219119",
                "991999129991811899199899922999829229",
                "221626516778657868888889246678856588",
                "221627412738247727887888226627722277",
                "221728612828168613972878226727622286",
                "891999818999188818921888827989729282",
                "991999919999199919911992929999929292",
                "221222217677626768888889225278723278",
                "221222212728226528886788212227512167",
                "891899218998128218982779812888219182",
                "991999219999129219921929912999219191",
                "221222117286612768887789222278722268",
                "891899118897212229887789811888219128",
                "991999119999112119982229911999119122",
                "891899119892711879898899822898829229",
                "991999119992211229998299911999219119",
                "991999119991811889299999922999829229",
                "221627617888767878888889357678866688",
                "221728613838268728987888226738722288",
                "891989818999188718982889828989729287",
                "991999919999199919921999929999929292",
                "221222218788626878888889226288823288",
                "891889218988228729998899812888719188",
                "991999219999129219992989912999219192",
                "891889119897712879898999822899829279",
                "991999119999212229998899911999219129",
                "991999119992811989999999922999829229",
                "221728618888768878988889268789868688",
                "891989718999278829998999828989829289",
                "991999919999199919992999929999929299",
                "891889219998827889999999827899929289",
                "991999219999229829999999912999819199",
                "991999119999812989999999922999929289",
                "891989719999878989999999878999979799",
                "991999919999299929999999929999929299",
                "991999219999929999999999928999929299",
                "991999919999999999999999989999999999",
                "667677787888888888999999677889978899",
                "567666783738678777888889266767856788",
                "567666681627577663866778266766745776",
                "567666781728478661835766265756735774",
                "568676791728488561914753265856736773",
                "698688891828499671915761266966847884",
                "899999991929699781916971277989969996",
                "999999991999999991919991999999999999",
                "999999991999999991919991999999999999",
                "457263686677777788888889366688856788",
                "456262682636667576887778252666722677",
                "447262681626466262866657242652622664",
                "467262681627477261824626242642622662",
                "588282691627488261814622252752622772",
                "799293791829699281916721262972722892",
                "999999991999899291919921992999929992",
                "999999991999999291919921993999929992",
                "456162586266766687788789263677833668",
                "446162472225566366777568241563622646",
                "467162481225466162665237241541522633",
                "577172591226476161724216241641522632",
                "798192691227687171816212261871622862",
                "999199991999999191919211981991929992",
                "999199991999999191919211991991929992",
                "557162486162765677688679252576723648",
                "467162382122564266577368241462622626",
                "477172491122464162665128241661522622",
                "798192691122686171726116261771622722",
                "999199891192899191919112991991829922",
                "999199991192999191919111991991929922",
                "467162486161764687288678252476723638",
                "577172482121664276287268241462622627",
                "698182691121676172266128261761622722",
                "999199991191899191228118991991929922",
                "999199991191999191219112991991929922",
                "678182496171764688188689262686723728",
                "798182692121676287188269261672622727",
                "999199891191899192188129981991929922",
                "999199991191999191129119991991929922",
                "698192697181876698199689362797823828",
                "999199892191998298199289981992929928",
                "999199991191999192199129991991929923",
                "999199998191998899199899992998929929",
                "999199992191999299199299991992929929",
                "999199999191999999199899992999939939",
                "226666677778778888888999367788966789",
                "226556672637477666877789146657723678",
                "226556671627277542864768135626622676",
                "226456671728277551822766135625622672",
                "227666681728288541912752136826622672",
                "228789891929299661912861166927823892",
                "999999991999299891912981188999929992",
                "999999991999299991912991199999939993",
                "226242476666766777888889245577833678",
                "226242372536366466776678122435612567",
                "226242371526266242863647122422412563",
                "226252381627266241822526122422312561",
                "228272691728278261912622122822612771",
                "999299891999299281912821122992819991",
                "999299991999299291912921122992919991",
                "226142266265654677788789232266723668",
                "226142272225243256676468121222412426",
                "226152271225253142762228121221212422",
                "227162281226266161822216121221212621",
                "999199291298298181912212121991219921",
                "999199291299299191912211121991219931",
                "226142276162642677687678222276622537",
                "226142272122242266576268121222312516",
                "227162281122262162662128121221212612",
                "999199291192282181822117121991219911",
                "999199291192292191912112121991219911",
                "226152286161642678288689222276622628",
                "227162282121262266287268121232212616",
                "999199291191282182272128121991219912",
                "999199291191292191222118121991219911",
                "227172286181762688188689222286722728",
                "999199292191282288188279121992219918",
                "999199291191292192183129121991219912",
                "999199297191882799199799222997829929",
                "999199292191392299199289121992319919",
                "999199299191992899199899232999929929",
                "125626666777767878888889266678856688",
                "124526562637367646876778125636722477",
                "124426561627167522863668124615622365",
                "125526671728167421821656124615622372",
                "126627681828188621911762126816622682",
                "199899991999199721911981128918929992",
                "199999991999199921911991129919929992",
                "124222266566646667887889234267723468",
                "123222262526235436776678112225512266",
                "124222261526136222862548112212212252",
                "126222281627166221821626112212212261",
                "198299291888189221911722112912219281",
                "199299291999199221911921112912219291",
                "124122166265622667687678222166623357",
                "124122162224222226676468111122312226",
                "126122171226122122762228111111112222",
                "198198191288122121921217111111119221",
                "199199191299122121911212111111119221",
                "124122166162621667688679222166622227",
                "126122172122221226676268111122212216",
                "198198191182121122872128111111119212",
                "199199191192121121921118111111119211",
                "126122176171621677288679222176622228",
                "198198192181221227287279111122219217",
                "199199191191121122282128111111119212",
                "198198197191721788198789222187729228",
                "199199192191221239188289111122219219",
                "199199199191821899199889222199829329",
                "122516566677667867888889246668845678",
                "122516452627256636876788124626622277",
                "122516451627156512862768124516622274",
                "122617661828168511921756126716622282",
                "192719891889199711911872127917829282",
                "192919991999199811911981129919929392",
                "122212246566626667787889224267723368",
                "122212242526225426876678112225512166",
                "122212261627126212862647112212212162",
                "192218281788128211921727112212218171",
                "192219291999129211911822112212219191",
                "122112146264612667787789222166622248",
                "122112162225212226776468111122212126",
                "192118181287112112872228111111118122",
                "192119191298112111921218111111119121",
                "122112166172611667588679222166622228",
                "192118182182211227787279111122218117",
                "192119191192111112882128111111119112",
                "192118187181711778298789222177728228",
                "192119192191211228288289111122219118",
                "192119198191811888198889222198829229",
                "121516526677656767887889246668845578",
                "121516522727256626876788125527622277",
                "121617521828167512962768126616622274",
                "191719721889188711921877127817728282",
                "191919921999199811911982129919929292",
                "121212226677625767887888224267722268",
                "121212222627226426876678112226512166",
                "181218221788127212972768112212218172",
                "191219221999129211921828112212219191",
                "121112126275612667787788222167622248",
                "181118122287212227887679111122218127",
                "191119121298112112982228111111119122",
                "181118127182711778798789222177728228",
                "191119122192211228888289111122219118",
                "191119128191811888298889222198829228",
                "121616516778657868888889246678846588",
                "121617512838257627886888126627622277",
                "181719711889178712972888127717728286",
                "191919811999199811921988128919829292",
                "121212216687626768887889224268723278",
                "181218212788227627987889112226618177",
                "191219211999128212982888112212219192",
                "181118117287712778898889222178828268",
                "191119112298212228988889111122219128",
                "191119118192811888898889222188829228",
                "121617617888657868888889247678857588",
                "181719712889278828987889127728828288",
                "191919811999189812982989128918829298",
                "181218217788727878998899226278828288",
                "191219212999228828988899112228819189",
                "191119118298812888998999222189829289",
                "181719718889778888998999268789868689",
                "191819812999289829998999128828829299",
                "191219218999828989998999228289929289",
                "191919819999889989999999288999989899",
                "667676787778888888999999577888967889",
                "457666683737677677888889266767845788",
                "447566681717577663866778266756744776",
                "457566781618578561825766265756734774",
                "568676791718488561914752265856734774",
                "789788891919699681916761276967868996",
                "999899991919899891918981298998989998",
                "999999991919999991919991299999999999",
                "457262686667777788888889366678845778",
                "447262672626666566877678252666722667",
                "347262681516476262865658242642622664",
                "458262681617477261824526252642622762",
                "678282791718688271916622262862622872",
                "999299991819899281918821282992929992",
                "999399991919999291919921292993929992",
                "447161586266766687788789253577833668",
                "437161482225566266677568241553622646",
                "447161481215466162765227231441522633",
                "668171691216587171725216261661622752",
                "999191891218899181918212281991829982",
                "999191991319999191919211291991929992",
                "447161486162764677688678252576722648",
                "447161482122565266577268241462622626",
                "668171691112576172666128251661622722",
                "999191891112888181828117281991829922",
                "999191991112999191919112291991929922",
                "457161486161764687288679262576722638",
                "668171692121676276287268261662622726",
                "999191891111788182278128281991729922",
                "999191991111999191229118291991929922",
                "668171596171775688188689262686723728",
                "999191892121888287189279281992829928",
                "999191991111999192189129291991929923",
                "999191897181988799199789282997829929",
                "999191992121999299199289291992929929",
                "999191999191999899199899392999939939",
                "226666676768777888888899366678856788",
                "226555672627467666877788146656722677",
                "226445671617277652864768135626622666",
                "226555681718277551822666135625622672",
                "227667791818288661912762156826722782",
                "299899991919299881912971178928929992",
                "299999991919299891912991189929929992",
                "226242376666666777888889244477833678",
                "226242372526366466776678122335611567",
                "226242371516266242863647122322411463",
                "227262581617277261822626122622511661",
                "298292791819289281912822122822711981",
                "299292891919299291912921122922811991",
                "226141276265644677787779232266722657",
                "226131272225253256676468121222411426",
                "227161281216264162762227121221211622",
                "298191291217287181922217121221211821",
                "299191291218298191912212121221211921",
                "226141276162642677688679222266622637",
                "227161282122262266676268121222311516",
                "298191291112282182772128121221211812",
                "299191291112292191822118121221211911",
                "227161286161662677288679222276622628",
                "298191292121282287287279121222211817",
                "299191291111292192283128121221211912",
                "298191297171882788198789222287722828",
                "299191292121392298188289121232311918",
                "299191298191892899199889232298822929",
                "115526666667667778888889266678845678",
                "114424562627267646876788125536722477",
                "114425561617167522862667124616622474",
                "116626671818177421921756125616622572",
                "118728891819199721911872127817822892",
                "119929991919199821911981128919922992",
                "114222266566636767787889224267722468",
                "114222262426235436776678112224511266",
                "115222271617146222862547112212211262",
                "118222281718178221921727112212211271",
                "119222291919189221911822112312211291",
                "114121166265622667687789222166722347",
                "116121172225222226776468111122211226",
                "118121181217122122862228111111111222",
                "119121191218122121921217111111111221",
                "116121176162621667687679222166622227",
                "117121182122221226787279111122211217",
                "119121191112121122872128111111111212",
                "118121186171721678288789222176722228",
                "119121192121221238288279111122211218",
                "119121198181821788198789222198822328",
                "112515566667667767888889246668845678",
                "112414452627256626876778125526622277",
                "112516561718167512862767124616622274",
                "112617781819188611921767126817722282",
                "112819891919199811911982128918822292",
                "112212246566626667887789223267722368",
                "112212262626226426876678112224411156",
                "112212281718127212972668112212211172",
                "112212291819128211921828112212211181",
                "112111156265612667787788222166622247",
                "112111182226212226887678111122211127",
                "112111191218112112972228111111111122",
                "112111186162611778688789222177722228",
                "112111192122211228888289111122211118",
                "112111198181811788298889222188822228",
                "111516526667666768887889246668845578",
                "111616422727267626876788125527622277",
                "111617721818178612972878126717622286",
                "111818821919189811921988128918822292",
                "111212226566626667887889223267722268",
                "111212222728227627887789112226611167",
                "111212221819128212982878112212211182",
                "111111126276612778888889222167722268",
                "111111122228212228987789111122211128",
                "111111128182711888888889222188822228",
                "111616516778656868887889246668846478",
                "111617612828268727987889126728722288",
                "111819811919189812982988128818822297",
                "111212217678726878888889226278822278",
                "111212212828228728988889112228711188",
                "111111118288712878998889222188822288",
                "111617617878768878998899268678866688",
                "111818812929288828988899128828822298",
                "111212218888828889998999227288822289",
                "111818818999888989998999278889978899",
                "557666787778888888888899577788967889",
                "447666683637677677888889266767844778",
                "447565681617577663866768265656734776",
                "457576781718488561925766265756733774",
                "668686891818688671916762266966856884",
                "899898991919799781917871287988978997",
                "999999991919899891918981288999989998",
                "447262686667777787888889365677845778",
                "447262682626577566877678242665722667",
                "347262681516477262866657242652622664",
                "668272691617588261825626262762622772",
                "899292891818789281917722272982822882",
                "999293891919899291918821282992822992",
                "446161586265766687788789262576833768",
                "437161482225566266777568241463622646",
                "568171681216576162766227251661622743",
                "899191791217788181827217271881722872",
                "999191891218898191918212281991822982",
                "447161486162765687688679252476722647",
                "568171682122676276677268251662622626",
                "899191791112787182777128271881722822",
                "999191891112898191828117281991822922",
                "568171586161765687288679262676722738",
                "899191792121787287288269271882722827",
                "999191891111898192278128281991822923",
                "898191797171886788199789272887822828",
                "999191892121898298189279281992822928",
                "999191898191998799199789382998933939",
                "226656676767777888888889366678866788",
                "226445672627477666877788135646722677",
                "226545671617277552864768135626622676",
                "227666781718288661822766146726722672",
                "228788891819299771912872177927822882",
                "229899991919299881912981188928823992",
                "226242376566666777888889245467823678",
                "226232372527366466876678122334611567",
                "227262481617267252863647122422411662",
                "228282691718288271922627122722611771",
                "229292891819288281912822122922811981",
                "226141276266654677787789232266722557",
                "226151282226264266776568121222411626",
                "228181291216276172862228121221211722",
                "229191291218288181922217121221211921",
                "226151286162662677687679222266722627",
                "228181292122272276787278121222311717",
                "229191291112282182873128121221211912",
                "228181286171772688288789222276722728",
                "229191292121382287288279121232311817",
                "229191298181882798198789232298822828",
                "115525666667667777888889256668845678",
                "115424562627267646876778125636722377",
                "116425671717177522862768125616622475",
                "117627781818188621921766126816722682",
                "118829891919189721911872127918822892",
                "114222266566646667887789224267722468",
                "115222262527246336876678112224511266",
                "117222281617167222862658112212211272",
                "118222291818188221921727112212211281",
                "114121166265622667787778222166722357",
                "117121182226222226786578111122211226",
                "118121191217122122872228111111111222",
                "117121186162621678688689222166722228",
                "118121192122221237787278111122211217",
                "118121197181721788288789222187722328",
                "112515656667667767888889246668844678",
                "112416562727267626876788125626622277",
                "112616671718178612962778126716622276",
                "112718881819189711921877127817822282",
                "112212256566626667787888224267722267",
                "112212272627226526886678112226611166",
                "112212281718128212972778112212211172",
                "112111176266612668788789222166722268",
                "112111182227212227887678111122211127",
                "112111187182711778788789222177822228",
                "111516526667667767887889236568834578",
                "111616622728277727986889126627722277",
                "111718721819188712972878127817722286",
                "111212226677626768888889225268822278",
                "111212222728227627887788112227611178",
                "111111127287712778888889222178722268",
                "111616617778667868988889256678856588",
                "111718712828278728987889127727722288",
                "111212217788727878888889226278822278",
                "111718718888778878998999267788867688",
                "557666787778888888888899577788866888",
                "557665682637678777888789266767844778",
                "547565781617587672866778265756734776",
                "668676891718588671926767266866845884",
                "789788891819799781917872286977867886",
                "999899991919899881918881288998979997",
                "446262686667777787888889365687844778",
                "447262682526677576877778252665722777",
                "568262681617588262866658262652722764",
                "788282791718688281926626272872722872",
                "999292891818899281918822282992822982",
                "447161586266776687788789262576833768",
                "558161682226676266777678251662622747",
                "788181791216688172866228261771722863",
                "899191891218788181827217271991822972",
                "567161586162766687688679262576722748",
                "788181692122677276688268261772622826",
                "899191891112788182778128271981722923",
                "788181696161876688288689262786822838",
                "899191792121787287288279271882722827",
                "899191797181887798199789382897833838",
                "226656676767777887888889266678856788",
                "226445682627477666887788146646722677",
                "227666781718288662864778146726722676",
                "228677781818288671922767166826722882",
                "228798891819299781912872177927822882",
                "226252376667667777888889244377823678",
                "226252482627366466877678122435711667",
                "228272681617277262863668122622611772",
                "228292791718288271922727122822711881",
                "226151286266664677787789232266722667",
                "227171282226276266787678121222611626",
                "228181291217287172873228121221211822",
                "227161286162662687688789222266722628",
                "228181292122372277787278121232311717",
                "228181297171772788288789232277722828",
                "115525676667667777888889256668845678",
                "115525672727267646877788125626722577",
                "117626681718178622962778126716622676",
                "118727781818188721921867127817722782",
                "115222266567646777788889224267722468",
                "116222282627266436876678112224611267",
                "117222281717177222872668112212211272",
                "116121176266622667788789222166722368",
                "117121182227222236777678111122211227",
                "117121186172721677688789222176722328",
                "112515666667667777888889246668844678",
                "112616672728267626876788125626722277",
                "112617781718178612972778126716722286",
                "112212266667626768888889224267722278",
                "112212272627227626887678112226611167",
                "112111176276712778788789222177722268",
                "111616626768667878888889246668845678",
                "111617722728278627987888126727722277",
                "111212226677626778888889226277722268",
                "111617617778777878988889266678866688",
                "557666786768888888888889477788866888",
                "557566782727688777878888266767844788",
                "668676781718688672866778266866754777",
                "778787891818788681927777277876866886",
                "899898891818799781917872287988878887",
                "447262686667777787888889365687844778",
                "568262682627677676878778262666722777",
                "668282791618688272866668262762722876",
                "898292891818788281827727272882822882",
                "458161686266777687788789262676833778",
                "678171782226687276778678261762722767",
                "788181791217788182877228271881722873",
                "678171686162776687688789262687822768",
                "788181792122787287788278271882722827",
                "788181797171887688288789372887833838",
                "227656786767777887888889266778866788",
                "227566682727578676877788156657822777",
                "228676781718288672976778166726722786",
                "228787891818288771922877177827822882",
                "226252476667767777888889244477822778",
                "227262682627377666887778122636711767",
                "228282781718288272873778122722711782",
                "227161286266676777788789232276722668",
                "228171282227377277877678121232611727",
                "228171287172772787788789232277722728",
                "116525676667677877888889266678845688",
                "117626682728277666887888126627722677",
                "117727881718188622972778127817722786",
                "116222276667666777888889224267822678",
                "117222282727277636887778112226711277",
                "117121186267722777787789222177722368",
                "112616676768667877888889266668845678",
                "112616772728278626977788126726722277",
                "112212276677727777888889226277822278",
                "111616627778777878888889266678866678",
                "658676787778888888888889477788866888",
                "668676882728688787888888276877855888",
                "778687891818788782977888276877866887",
                "788787891819899781928877287877877887",
                "557262786667788787888889366787854888",
                "668272792627688686888789272766822877",
                "788282891818788282877778272872822887",
                "668171786266887788888889262787833878",
                "788181792227788287888789271872822877",
                "778181797172887788788889372787833878",
                "227666786768788887888889276778866788",
                "228676782728688777987889166767822788",
                "228787881818288772977878177827822887",
                "227262686667777788888889266677822778",
                "228272782728388677887788122737811777",
                "228171287277777787888889232277822778",
                "117626686768778888888889266778866788",
                "117626782728288677987889126727822788",
                "117222286667777787888889226277822678",
                "112616777778778878988889266778866788",
                "668676887778888888888889577888877888",
                "778686882728788787888889277878866888",
                "778787891818788882987888277877877887",
                "668272786667888888888889376788866888",
                "778282792728788787888888272777822878",
                "778181797277888787888889372788833878",
                "228676786768788888888889277788866888",
                "228777882828788777888889177878822788",
                "228272787778788887888889276788822778",
                "117726786778788887888889277778866788",
                "778787887878888888888889687888877888",
                "778787882828788788888888277878877888",
                "778282787778888888888889377888877888",
                "228777887878888888888889277888877888",
                "778787887878888888888889788888878888",
            ];

            let mut distance_stock_order: [[u8; 36]; 1001] = [[0; 36]; 1001];

            for si in 0..1001 {
                for (oi, c) in distance_temp[si].chars().enumerate() {
                    distance_stock_order[si][oi] = match c {
                        '1' => 1,
                        '2' => 2,
                        '3' => 3,
                        '4' => 4,
                        '5' => 5,
                        '6' => 8,
                        '7' => 13,
                        '8' => 20,
                        '9' => 38,
                        _ => 50,
                    }
                }
            }

            distance_stock_order
        }

        pub fn getStockId(&self, stockArr: &Stock) -> usize {
            self.map_stockArr4_stockId[stockArr[0] as usize][stockArr[1] as usize]
                [stockArr[2] as usize][stockArr[3] as usize]
        }

        pub fn how_many_times_can_cast_spell(&self, spell_id: u32, stock_id: usize) -> u8 {
            self.map_stockId_timesCanCastSpell[stock_id][spell_id as usize]
        }

        pub fn can_fulfill_order(&self, order_id: u32, stock_id: usize) -> bool {
            self.map_stockId_canFullfillOrder[stock_id][order_id as usize]
        }

        pub fn getOrder(&self, order_id: u32) -> Order {
            self.map_orderId_Order[order_id as usize].clone()
        }

        pub fn getSpell(&self, spell_id: u32) -> Spell {
            self.map_spellId_Spell[spell_id as usize].clone()
        }

        pub fn estimate_distance(&self, stock_id: usize, order_id: u32) -> u8 {
            self.distance_stock_order[stock_id][order_id as usize]
        }
    }

    /* #region(collapsed) [Private functions] */

    #[derive(Copy, Clone, Default, Debug)]
    pub struct Spell {
        pub id: u32,
        pub recipe: Recipe,
        pub delta_stock: i8,
        pub repeatable: bool,
    }

    #[derive(Copy, Clone, Default, Debug)]
    pub struct Order {
        pub id: u32,
        pub recipe: Recipe,
        pub price: u8,
    }

    fn get_all_tome_spells() -> Vec<Spell> {
        let mut tome_spells = get_learnable_tome_spells();
        tome_spells.extend_from_slice(&get_basic_spells());

        tome_spells
    }

    fn get_learnable_tome_spells() -> Vec<Spell> {
        let spells: Vec<Recipe> = vec![
            [-3, 0, 0, 1],
            [3, -1, 0, 0],
            [1, 1, 0, 0],
            [0, 0, 1, 0],
            [3, 0, 0, 0],
            [2, 3, -2, 0],
            [2, 1, -2, 1],
            [3, 0, 1, -1],
            [3, -2, 1, 0],
            [2, -3, 2, 0],
            [2, 2, 0, -1],
            [-4, 0, 2, 0],
            [2, 1, 0, 0],
            [4, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 2, 0, 0],
            [1, 0, 1, 0],
            [-2, 0, 1, 0],
            [-1, -1, 0, 1],
            [0, 2, -1, 0],
            [2, -2, 0, 1],
            [-3, 1, 1, 0],
            [0, 2, -2, 1],
            [1, -3, 1, 1],
            [0, 3, 0, -1],
            [0, -3, 0, 2],
            [1, 1, 1, -1],
            [1, 2, -1, 0],
            [4, 1, -1, 0],
            [-5, 0, 0, 2],
            [-4, 0, 1, 1],
            [0, 3, 2, -2],
            [1, 1, 3, -2],
            [-5, 0, 3, 0],
            [-2, 0, -1, 2],
            [0, 0, -3, 3],
            [0, -3, 3, 0],
            [-3, 3, 0, 0],
            [-2, 2, 0, 0],
            [0, 0, -2, 2],
            [0, -2, 2, 0],
            [0, 0, 2, -1],
        ];

        spells
            .iter()
            .enumerate()
            .map(|(i, s)| Spell {
                id: i as u32,
                recipe: s.clone(),
                delta_stock: s[0] + s[1] + s[2] + s[3],
                repeatable: s[0] < 0 || s[1] < 0 || s[2] < 0 || s[3] < 0,
            })
            .collect::<Vec<Spell>>()
    }

    fn get_basic_spells() -> Vec<Spell> {
        [
            Spell {
                id: 42,
                recipe: [2, 0, 0, 0],
                delta_stock: 2,
                repeatable: false,
            },
            Spell {
                id: 43,
                recipe: [-1, 1, 0, 0],
                delta_stock: 0,
                repeatable: false,
            },
            Spell {
                id: 44,
                recipe: [0, -1, 1, 0],
                delta_stock: 0,
                repeatable: false,
            },
            Spell {
                id: 45,
                recipe: [0, 0, -1, 1],
                delta_stock: 0,
                repeatable: false,
            },
        ]
        .to_vec()
    }

    fn get_all_orders() -> Vec<Order> {
        let orders: Vec<(Recipe, u8)> = vec![
            ([2, 2, 0, 0], 6),
            ([3, 2, 0, 0], 7),
            ([0, 4, 0, 0], 8),
            ([2, 0, 2, 0], 8),
            ([2, 3, 0, 0], 8),
            ([3, 0, 2, 0], 9),
            ([0, 2, 2, 0], 10),
            ([0, 5, 0, 0], 10),
            ([2, 0, 0, 2], 10),
            ([2, 0, 3, 0], 11),
            ([3, 0, 0, 2], 11),
            ([0, 0, 4, 0], 12),
            ([0, 2, 0, 2], 12),
            ([0, 3, 2, 0], 12),
            ([0, 2, 3, 0], 13),
            ([0, 0, 2, 2], 14),
            ([0, 3, 0, 2], 14),
            ([2, 0, 0, 3], 14),
            ([0, 0, 5, 0], 15),
            ([0, 0, 0, 4], 16),
            ([0, 2, 0, 3], 16),
            ([0, 0, 3, 2], 17),
            ([0, 0, 2, 3], 18),
            ([0, 0, 0, 5], 20),
            ([2, 1, 0, 1], 9),
            ([0, 2, 1, 1], 12),
            ([1, 0, 2, 1], 12),
            ([2, 2, 2, 0], 13),
            ([2, 2, 0, 2], 15),
            ([2, 0, 2, 2], 17),
            ([0, 2, 2, 2], 19),
            ([1, 1, 1, 1], 12),
            ([3, 1, 1, 1], 14),
            ([1, 3, 1, 1], 16),
            ([1, 1, 3, 1], 18),
            ([1, 1, 1, 3], 20),
        ];

        orders
            .iter()
            .enumerate()
            .map(|(i, o)| Order {
                id: i as u32,
                recipe: [-o.0[0], -o.0[1], -o.0[2], -o.0[3]],
                price: o.1,
            })
            .collect::<Vec<Order>>()
    }

    /* Return how many times the spell can be cast */
    fn how_many_times_can_cast_spell(spell: &Spell, stock: &Stock) -> u8 {
        if spell.repeatable == false {
            match can_cast_spell(spell, stock) {
                true => 1,
                false => 0,
            }
        } else {
            let mut times = 0;
            let mut stock = stock.clone();

            while can_cast_spell(spell, &stock) {
                times += 1;
                cast_and_update_stock(&mut stock, &spell.recipe, 1);
            }

            times
        }
    }

    fn can_cast_spell(spell: &Spell, stock: &Stock) -> bool {
        let empty_slots = 10 - stock[0] - stock[1] - stock[2] - stock[3];

        if spell.delta_stock > empty_slots {
            return false;
        }
        for i in 0..4 {
            if spell.recipe[i] < 0 && stock[i] < -spell.recipe[i] {
                return false;
            }
        }
        true
    }

    fn can_fulfill_order(order: &Order, stock: &Stock) -> bool {
        stock[0] >= -order.recipe[0]
            && stock[1] >= -order.recipe[1]
            && stock[2] >= -order.recipe[2]
            && stock[3] >= -order.recipe[3]
    }

    fn cast_and_update_stock(stock: &mut Stock, recipe: &Recipe, times: u8) {
        for _ in 0..times {
            for i in 0..4 {
                stock[i] += recipe[i];
            }
        }
    }

    fn brew_and_update_stock(stock: &mut Stock, recipe: &Recipe) {
        for i in 0..4 {
            stock[i] += recipe[i];
        }
    }

    fn get_order_position(ids: &[u32], id: u32) -> Option<usize> {
        for i in 0..ids.len() {
            if ids[i] == id {
                return Some(i);
            }
        }
        None
    }

    fn get_player_spell_position(ids: &[(u32, bool)], id: u32) -> Option<usize> {
        for i in 0..ids.len() {
            if ids[i].0 == id {
                return Some(i);
            }
        }
        None
    }

    pub fn get_tome_spell_position(ids: &[(u32, u8)], id: u32) -> Option<usize> {
        for i in 0..ids.len() {
            if ids[i].0 == id {
                return Some(i);
            }
        }
        None
    }

    pub fn find_order(recipe: &Recipe) -> Option<Order> {
        for order in get_all_orders().iter() {
            if order.recipe == *recipe {
                return Some(order.clone());
            }
        }

        None
    }

    pub fn find_spell(recipe: &Recipe) -> Option<Spell> {
        for spell in get_all_tome_spells().iter() {
            if spell.recipe == *recipe {
                return Some(spell.clone());
            }
        }

        None
    }

    /* #endregion */
}

mod beam {
    use super::game;
    use std::time::Instant;

    const MAX_NODE_COUNT: usize = 300_000;
    const TIME_LIMIT_MS: u128 = 49;

    #[derive(Clone, Copy)]
    struct Node {
        move_: game::Move,
        state: game::State,

        parent: Option<usize>,
        child_first: Option<usize>,
        child_count: usize,
        depth: usize,
        eval: f32,
    }

    impl Default for Node {
        fn default() -> Self {
            Self {
                move_: game::Move::default(),
                state: game::State::default(),
                parent: None,
                child_first: None,
                child_count: 0,
                depth: 0,
                eval: 0.0,
            }
        }
    }

    pub struct Beam {
        arr: Vec<Node>,
        len: usize,
    }

    impl Beam {
        pub fn new() -> Self {
            Self {
                arr: vec![Node::default(); MAX_NODE_COUNT],
                len: 0,
            }
        }

        /* Return the best found path. Path is a vector of Move, eval score */
        pub fn best_path(
            &mut self,
            start_state: game::State,
            cache: &game::Cache,
        ) -> Vec<(game::Move, f32)> {
            const BEAM_SIZE: usize = 1000;

            let start = Instant::now();
            self.init(start_state);

            let mut frontier: Vec<usize> = Vec::with_capacity(BEAM_SIZE);
            frontier.push(0);

            let mut max_eval = -f32::INFINITY;
            let mut most_valuable_node_idx = 0;

            'main: while (start.elapsed().as_millis() < TIME_LIMIT_MS) && (frontier.len() > 0) {
                let mut frontier_temp: Vec<(usize, f32)> = Vec::new();
                let mut min_eval_temp: f32 = f32::INFINITY;

                for node_idx in frontier.iter() {
                    let node = &self.arr[*node_idx];
                    /* Get the next states & moves */
                    let next_states: Vec<(game::Move, game::State)> =
                        game::next_states(&node.state, cache);

                    /* Create children nodes */
                    let mut children: Vec<Node> = next_states
                        .into_iter()
                        .map(|(move_, state)| Node {
                            move_: move_,
                            state: state,
                            parent: Some(*node_idx),
                            child_first: None,
                            child_count: 0,
                            depth: node.depth + 1,
                            eval: Beam::eval(&state, node.depth, cache),
                        })
                        .collect::<Vec<Node>>();

                    /* Check if there's still place for children */
                    if self.len + children.len() > MAX_NODE_COUNT {
                        break 'main;
                    }

                    /* Remove children whose score is so low, they will never be added to the frontier */
                    if frontier_temp.len() > BEAM_SIZE {
                        children.retain(|c| c.eval > min_eval_temp);
                    }

                    /* Add the children nodes to the tree */
                    self.set_children(*node_idx, children);

                    /* Determine the highest & lowest child score so far */
                    let parent_node = &self.arr[*node_idx];
                    for child_idx in parent_node.child_first.unwrap()
                        ..parent_node.child_first.unwrap() + parent_node.child_count as usize
                    {
                        let child: &Node = &self.arr[child_idx];

                        /* Determine if it's the most valuable node so far */
                        if child.eval > max_eval {
                            max_eval = child.eval;
                            most_valuable_node_idx = child_idx;
                        }
                        if child.eval < min_eval_temp {
                            min_eval_temp = child.eval;
                        }

                        /* And add it to the temp frontier */
                        frontier_temp.push((child_idx, child.eval));
                    }
                }

                /* Select the top BEAM_SIZE frontier nodes and add them to the frontier */
                frontier_temp.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());
                frontier.clear();

                for i in 0..std::cmp::min(frontier_temp.len(), BEAM_SIZE) {
                    frontier.push(frontier_temp[i].0);
                }
            }

            if frontier.len() > 0 {
                eprintln!(
                    "[BEAM P5] End. Sending best path after expanding {} nodes in {:?}",
                    self.len,
                    start.elapsed()
                );
            } else {
                eprintln!(
                    "[BEAM P5] End. Sending best path after expanding ALL {} nodes in {:?}",
                    self.len,
                    start.elapsed()
                );
            }

            /* When search is finished, determine the most valuable node, and extract its moves */
            let mut best_path: Vec<(game::Move, f32)> = Vec::new();
            let mut n = most_valuable_node_idx;
            while self.arr[n].parent.is_some() {
                best_path.push((self.arr[n].move_, self.arr[n].eval));
                n = self.arr[n].parent.unwrap();
            }

            best_path.reverse();
            best_path
        }

        fn init(&mut self, start_state: game::State) {
            self.arr[0] = Node {
                move_: game::Move::default(),
                state: start_state,
                parent: None,
                child_first: None,
                child_count: 0,
                depth: 0,
                eval: 0.0,
            };

            self.len = 1;
        }

        fn set_children(&mut self, parent: usize, children: Vec<Node>) {
            self.arr[parent].child_first = Some(self.len);
            self.arr[parent].child_count = children.len();

            for child in children.into_iter() {
                self.arr[self.len] = child;
                self.len += 1;
            }
        }

        fn eval(state: &game::State, node_depth: usize, cache: &game::Cache) -> f32 {
            const PATH_LEN_FACTOR: f32 = 1.0;

            game::eval(state, cache) * PATH_LEN_FACTOR.powi(node_depth as i32)
        }
    }
}

#[allow(unused_variables, unused_assignments, unused_must_use)]
pub fn play(
    ctr_rcv: Receiver<bool>,
    msg_rcv: Receiver<String>,
    msg_snd: Sender<(String, Option<std::collections::HashMap<String, String>>)>,
    params: Option<Vec<String>>,
) {
    /* State variables that have to be maintained as they are not sent by the game */
    let mut turn: u8 = 0;
    let mut player_rupees: [u32; 2] = [0, 0];
    let mut player_brewed_potion_count: [u8; 2] = [0, 0];

    let cache = game::Cache::new();
    let mut beam: beam::Beam = beam::Beam::new();

    // game loop
    while ctr_rcv.recv().unwrap() == true {
        /* Prepare mappings between internal spell & order ids & codingame ids */
        #[allow(non_snake_case)]
        let mut map_order_internalId_cgId: HashMap<u32, u32> = HashMap::new();
        #[allow(non_snake_case)]
        let mut map_learn_spell_internalId_cgId: HashMap<u32, u32> = HashMap::new();
        #[allow(non_snake_case)]
        let mut map_cast_spell_internalId_cgId: HashMap<u32, u32> = HashMap::new();

        /* Prepare inputs */
        let mut players: [game::Player; 2] = [game::Player {
            stock: [0, 0, 0, 0],
            stock_id: cache.getStockId(&[0, 0, 0, 0]),
            spells: StackVector::new(),
            rupees: 0,
            brewed_potions_count: 0,
        }; 2];

        let mut counter_orders: StackVector<u32, 5> = StackVector::new();
        let mut plus_3_bonus_remaining: u8 = 0;
        let mut plus_1_bonus_remaining: u8 = 0;

        let mut tome_spells: StackVector<(u32, u8), 6> = StackVector::new();

        /* Read inputs */
        let mut input_line = String::new();
        input_line = msg_rcv.recv().unwrap();
        let action_count = parse_input!(input_line, i32); // the number of spells and recipes in play
        for i in 0..action_count as usize {
            let mut input_line = String::new();
            input_line = msg_rcv.recv().unwrap();
            let inputs = input_line.split(" ").collect::<Vec<_>>();
            let action_id = parse_input!(inputs[0], u32); // the unique ID of this spell or recipe
            let action_type = inputs[1].trim().to_string(); // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
            let delta_0 = parse_input!(inputs[2], i8); // tier-0 ingredient change
            let delta_1 = parse_input!(inputs[3], i8); // tier-1 ingredient change
            let delta_2 = parse_input!(inputs[4], i8); // tier-2 ingredient change
            let delta_3 = parse_input!(inputs[5], i8); // tier-3 ingredient change
            let price = parse_input!(inputs[6], u8); // the price in rupees if this is a potion
            let tome_index = parse_input!(inputs[7], i32); // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax; For brews, this is the value of the current urgency bonus
            let tax_count = parse_input!(inputs[8], i32); // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell; For brews, this is how many times you can still gain an urgency bonus
            let castable = parse_input!(inputs[9], i32); // in the first league: always 0; later: 1 if this is a castable player spell
            let repeatable = parse_input!(inputs[10], i32); // for the first two leagues: always 0; later: 1 if this is a repeatable player spell

            /* READ INPUT AND UPDATE STATE */
            if action_type == String::from("BREW") {
                let order = game::find_order(&[delta_0, delta_1, delta_2, delta_3]).unwrap();

                match tome_index {
                    3 => {
                        plus_3_bonus_remaining = tax_count as u8;
                    }
                    1 => {
                        plus_1_bonus_remaining = tax_count as u8;
                    }
                    _ => {}
                }

                map_order_internalId_cgId.insert(order.id, action_id);
                counter_orders.add(order.id);
            } else if action_type == String::from("CAST")
                || action_type == String::from("OPPONENT_CAST")
            {
                let p = match action_type.as_str() {
                    "CAST" => 0,
                    "OPPONENT_CAST" => 1,
                    _ => panic!(),
                };

                let spell = game::find_spell(&[delta_0, delta_1, delta_2, delta_3]).unwrap();
                if p == 0 {
                    map_cast_spell_internalId_cgId.insert(spell.id as u32, action_id);
                }
                let mut active = true;
                if castable == 0 {
                    active = false;
                }

                players[p as usize].spells.add((spell.id, active));
            } else if action_type == String::from("LEARN") {
                let spell = game::find_spell(&[delta_0, delta_1, delta_2, delta_3]).unwrap();
                map_learn_spell_internalId_cgId.insert(spell.id as u32, action_id);

                tome_spells.add((spell.id, tax_count as u8));
            }
        }
        for i in 0..2 as usize {
            let mut input_line = String::new();
            input_line = msg_rcv.recv().unwrap();
            let inputs = input_line.split(" ").collect::<Vec<_>>();
            let inv_0 = parse_input!(inputs[0], i8); // tier-0 ingredients in inventory
            let inv_1 = parse_input!(inputs[1], i8);
            let inv_2 = parse_input!(inputs[2], i8);
            let inv_3 = parse_input!(inputs[3], i8);
            let score = parse_input!(inputs[4], u32); // amount of rupees

            players[i].stock = [inv_0, inv_1, inv_2, inv_3];
            players[i].stock_id = cache.getStockId(&players[i].stock);

            players[i].rupees = score as u8;

            if score > player_rupees[i] {
                player_brewed_potion_count[i] += 1;
            }
            player_rupees[i] = score;

            players[i].brewed_potions_count = player_brewed_potion_count[i];
        }

        /* Initialize states */

        let state = game::State {
            player: players[0].clone(),
            counter_orders,
            plus_3_bonus_remaining,
            plus_1_bonus_remaining,

            tome_spells: tome_spells.clone(),
            turn,
        };

        /* Extract best path */
        let mut best_path = beam.best_path(state, &cache);

        /* Extract best move */
        let best_move = best_path[0].0;

        /* Update turn */
        turn += 1;

        // convert move to codingame id
        let best_move_cg = match best_move {
            game::Move::NONE | game::Move::WAIT | game::Move::REST => best_move.clone(),
            game::Move::BREW(o) => game::Move::BREW(*map_order_internalId_cgId.get(&o).unwrap()),
            game::Move::CAST(s, t) => {
                game::Move::CAST(*map_cast_spell_internalId_cgId.get(&s).unwrap(), t)
            }
            game::Move::LEARN(s) => {
                game::Move::LEARN(*map_learn_spell_internalId_cgId.get(&s).unwrap())
            }
        };

        /* #region [Extract player state] */

        let mut player_state: HashMap<String, String> = HashMap::new();

        player_state.insert(
            "Best path".to_string(),
            best_path
                .iter()
                .map(|(m, e)| format!("{} ({:.1})", m, e))
                .collect::<Vec<String>>()
                .join(" → "),
        );

        /* #endregion */

        let msg = best_move_cg.to_string();
        //msg_snd.send((format!("{}", msg), None));
        msg_snd.send((format!("{}", msg), Some(player_state)));
    }
}
